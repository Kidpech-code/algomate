// Generated by dart2js (, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver == "object") {
        if (receiver instanceof A.Object) {
          return receiver;
        } else {
          return J.JavaScriptObject.prototype;
        }
      }
      return receiver;
    },
    getInterceptor$as(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      return receiver;
    },
    get$length$as(receiver) {
      return J.getInterceptor$as(receiver).get$length(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _.__interceptors$_iterable = t0;
      _.__interceptors$_length = t1;
      _.__interceptors$_index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      A.RangeError_checkNotNegative(_endOrLength, "end");
      if (_start > _endOrLength)
        A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _._iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectTypeName(object) {
      var interceptor, t1, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor !== B.Interceptor_methods)
        t1 = interceptor === B.JavaScriptObject_methods;
      else
        t1 = true;
      if (t1) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$as(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$as(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, _s5_);
      return new A.RangeError(null, null, true, index, _s5_, "Value not in range");
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(ex, new Error());
    },
    initializeExceptionWrapper(ex, wrapper) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex, wrapper) {
      throw A.initializeExceptionWrapper(ex, wrapper == null ? new Error() : wrapper);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpression(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunction(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunction(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found."));
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 8:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 9:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 10:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    _structuralTypeOf(object) {
      var functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = new A._Type(rti) : t1;
    },
    _installSpecializedIsTest(object) {
      var kind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (A.isTopType(testRti))
        return A._finishIsFn(testRti, object, A._isTop);
      kind = testRti._kind;
      if (kind === 6)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (kind === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      if (kind === 7)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (testRti === type$.int)
        isFn = A._isInt;
      else if (testRti === type$.double || testRti === type$.num)
        isFn = A._isNum;
      else if (testRti === type$.String)
        isFn = A._isString;
      else
        isFn = testRti === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (kind === 8) {
        $name = testRti._primary;
        if (testRti._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (kind === 10) {
        predicate = A.createRecordTypePredicate(testRti._primary, testRti._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (A.isTopType(testRti))
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else if (A.isNullable(testRti))
        asFn = A._generalNullableAsCheckImplementation;
      if (testRti === type$.int)
        asFn = A._asInt;
      else if (testRti === type$.nullable_int)
        asFn = A._asIntQ;
      else if (testRti === type$.String)
        asFn = A._asString;
      else if (testRti === type$.nullable_String)
        asFn = A._asStringQ;
      else if (testRti === type$.bool)
        asFn = A._asBool;
      else if (testRti === type$.nullable_bool)
        asFn = A._asBoolQ;
      else if (testRti === type$.num)
        asFn = A._asNum;
      else if (testRti === type$.nullable_num)
        asFn = A._asNumQ;
      else if (testRti === type$.double)
        asFn = A._asDouble;
      else if (testRti === type$.nullable_double)
        asFn = A._asDoubleQ;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null || testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _errorForAsCheck(object, testRti) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this;
      return testRti._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, testRti)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "Object"), new Error());
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool"), new Error());
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool?"), new Error());
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double"), new Error());
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double?"), new Error());
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int"), new Error());
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int?"), new Error());
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num"), new Error());
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num?"), new Error());
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String"), new Error());
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String?"), new Error());
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, typeParametersText, typeSep, t2, t3, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t2 = genericContext.length;
          t3 = t2 - 1 - i;
          if (!(t3 >= 0))
            return A.ioore(genericContext, t3);
          typeParametersText = typeParametersText + typeSep + genericContext[t3];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 7)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 8) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 10)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, false));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 9 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 6)
              t1 = baseKind === 7 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isTopType(baseType) || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 9) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 9)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 11:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 9) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 8)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null);
        sCache.set(t, result);
      }
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (A.isTopType(t))
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isTopType(s))
        return false;
      if (s._kind === 1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = type$.Null;
      if (s === t1 || s === type$.JSNull) {
        if (tKind === 7)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === t1 || t === type$.JSNull || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 7)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 6;
      }
      if (sKind === 7) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 6)
        return A._isSubtype(universe, t1, sEnv, t, tEnv) && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 7) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, t1, tEnv) || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      t2 = sKind === 10;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 8) {
        if (tKind !== 8)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 10)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isTopType(t))
          if (kind !== 6)
            t1 = kind === 7 && A.isNullable(t._primary);
      return t1;
    },
    isTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, $E) {
      var t1, _i,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        B.JSArray_methods.add$1(list, $E._as(elements[_i]));
      return list;
    },
    List_List$_of(elements, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var t2,
        t1 = A._arrayInstanceType(objects),
        iterator = new J.ArrayIterator(objects, objects.length, t1._eval$1("ArrayIterator<1>"));
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        t1 = t1._precomputed1;
        do {
          t2 = iterator.__interceptors$_current;
          string += A.S(t2 == null ? t1._as(t2) : t2);
        } while (iterator.moveNext$0());
      } else {
        t2 = iterator.__interceptors$_current;
        string += A.S(t2 == null ? t1._precomputed1._as(t2) : t2);
        for (t1 = t1._precomputed1; iterator.moveNext$0();) {
          t2 = iterator.__interceptors$_current;
          string = string + separator + A.S(t2 == null ? t1._as(t2) : t2);
        }
      }
      return string;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message) {
      return new A.ArgumentError(false, null, null, message);
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    print(object) {
      A.printString(object);
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    Iterable: function Iterable() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _Random: function _Random() {
      this._hi = this._lo = 0;
    },
    Strategy: function Strategy() {
    },
    AlgoMetadata: function AlgoMetadata(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.timeComplexity = t1;
      _.spaceComplexity = t2;
      _.requiresSorted = t3;
      _.memoryOverheadBytes = t4;
      _.description = t5;
    },
    TimeComplexity: function TimeComplexity(t0, t1, t2) {
      this.notation = t0;
      this.rankValue = t1;
      this._name = t2;
    },
    PriorityQueue: function PriorityQueue(t0, t1) {
      this._heap = t0;
      this.$ti = t1;
    },
    BinarySearchTree: function BinarySearchTree(t0) {
      this._root = null;
      this.$ti = t0;
    },
    BSTNode: function BSTNode(t0, t1) {
      var _ = this;
      _.value = t0;
      _.right = _.left = null;
      _.$ti = t1;
    },
    CircularBuffer: function CircularBuffer(t0) {
      var _ = this;
      _.__CircularBuffer__buffer_A = $;
      _._size = _._tail = _._head = 0;
      _.__CircularBuffer__capacity_A = $;
      _.$ti = t0;
    },
    KnapsackInput: function KnapsackInput(t0, t1, t2) {
      this.weights = t0;
      this.values = t1;
      this.capacity = t2;
    },
    KnapsackResult: function KnapsackResult(t0, t1) {
      this.maxValue = t0;
      this.selectedItems = t1;
    },
    KnapsackDP: function KnapsackDP() {
    },
    LCSInput: function LCSInput(t0, t1) {
      this.text1 = t0;
      this.text2 = t1;
    },
    LCSResult: function LCSResult(t0, t1) {
      this.length = t0;
      this.subsequence = t1;
    },
    LongestCommonSubsequenceDP: function LongestCommonSubsequenceDP() {
    },
    CoinChangeInput: function CoinChangeInput(t0, t1) {
      this.coins = t0;
      this.amount = t1;
    },
    CoinChangeResult: function CoinChangeResult(t0, t1) {
      this.minCoins = t0;
      this.coinCombination = t1;
    },
    CoinChangeDP: function CoinChangeDP() {
    },
    BinarySearchStrategy: function BinarySearchStrategy(t0) {
      this.target = t0;
    },
    LinearSearchStrategy: function LinearSearchStrategy(t0) {
      this.target = t0;
    },
    InsertionSortStrategy: function InsertionSortStrategy() {
    },
    MergeSortStrategy: function MergeSortStrategy() {
    },
    QuickSort: function QuickSort() {
    },
    KMPInput: function KMPInput(t0, t1) {
      this.text = t0;
      this.pattern = t1;
    },
    KMPResult: function KMPResult(t0) {
      this.occurrences = t0;
    },
    RabinKarpInput: function RabinKarpInput(t0, t1) {
      this.text = t0;
      this.pattern = t1;
    },
    RabinKarpResult: function RabinKarpResult(t0, t1) {
      this.occurrences = t0;
      this.hashCollisions = t1;
    },
    ManacherInput: function ManacherInput(t0) {
      this.text = t0;
    },
    ManacherResult: function ManacherResult(t0, t1, t2) {
      this.longestPalindrome = t0;
      this.startIndex = t1;
      this.length = t2;
    },
    KnuthMorrisPrattAlgorithm: function KnuthMorrisPrattAlgorithm() {
    },
    RabinKarpAlgorithm: function RabinKarpAlgorithm() {
    },
    ManacherAlgorithm: function ManacherAlgorithm() {
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    throwLateFieldNI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldNI(fieldName), new Error());
    },
    throwLateFieldADI(fieldName) {
      throw A.initializeExceptionWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    main() {
      var data, mergeSorted, t1, quickSorted, insertionSorted, lcsResult, _s5_ = "count";
      A.print("AlgoMate Web Compatibility Demo");
      A.print("=================================\n");
      A.print("1. Sorting Algorithms:");
      data = A.generateRandomData(1000);
      mergeSorted = new A.MergeSortStrategy().execute$1(data);
      t1 = type$.int;
      A.print("  \u2705 MergeSort: " + A.S(A.SubListIterable$(mergeSorted, 0, A.checkNotNullable(5, _s5_, t1), A._arrayInstanceType(mergeSorted)._precomputed1).toList$0(0)) + "... (" + mergeSorted.length + " elements)");
      quickSorted = new A.QuickSort().execute$1(data);
      A.print("  \u2705 QuickSort: " + A.S(A.SubListIterable$(quickSorted, 0, A.checkNotNullable(5, _s5_, t1), A._arrayInstanceType(quickSorted)._precomputed1).toList$0(0)) + "... (" + quickSorted.length + " elements)");
      insertionSorted = new A.InsertionSortStrategy().execute$1(A.SubListIterable$(data, 0, A.checkNotNullable(50, _s5_, t1), A._arrayInstanceType(data)._precomputed1).toList$0(0));
      A.print("  \u2705 InsertionSort: " + A.S(A.SubListIterable$(insertionSorted, 0, A.checkNotNullable(5, _s5_, t1), A._arrayInstanceType(insertionSorted)._precomputed1).toList$0(0)) + "... (" + insertionSorted.length + " elements)");
      A.print("\n2. Search Algorithms:");
      A.testSearchAlgorithms();
      A.print("\n3. Dynamic Programming:");
      t1 = type$.JSArray_int;
      A.print("  \u2705 Knapsack: max value " + new A.KnapsackDP().execute$1(new A.KnapsackInput(A._setArrayType([2, 3, 4], t1), A._setArrayType([3, 4, 5], t1), 5)).maxValue);
      A.print("  \u2705 CoinChange for amount 6: " + new A.CoinChangeDP().execute$1(new A.CoinChangeInput(A._setArrayType([1, 3, 4], t1), 6)).minCoins + " coins");
      lcsResult = new A.LongestCommonSubsequenceDP().execute$1(new A.LCSInput("ABCDGH", "AEDFHR"));
      A.print('  \u2705 LCS of "ABCDGH" and "AEDFHR": "' + lcsResult.subsequence + '" (length ' + lcsResult.length + ")");
      A.print("\n4. String Processing:");
      A.print("  \u2705 KMP pattern matching: found at positions " + A.S(new A.KnuthMorrisPrattAlgorithm().execute$1(new A.KMPInput("ABABCABABA", "ABAB")).occurrences));
      A.print("  \u2705 Rabin-Karp: found at positions " + A.S(new A.RabinKarpAlgorithm().execute$1(new A.RabinKarpInput("hello world hello", "hello")).occurrences));
      A.print('  \u2705 Longest palindrome in "racecar": "' + new A.ManacherAlgorithm().execute$1(new A.ManacherInput("racecar")).longestPalindrome + '"');
      A.print("\n5. Custom Data Structures:");
      A.testCustomDataStructures();
      A.print("\nWeb compatibility test completed successfully! \ud83c\udf89");
    },
    testSearchAlgorithms() {
      var i,
        data = J.JSArray_JSArray$allocateGrowable(1000, type$.int);
      for (i = 0; i < 1000; ++i)
        data[i] = i * 2;
      A.print("  \u2705 BinarySearch for 500: found at index " + A.S(new A.BinarySearchStrategy(500).execute$1(data)));
      A.print("  \u2705 LinearSearch for 500: found at index " + A.S(new A.LinearSearchStrategy(500).execute$1(data)));
    },
    testCustomDataStructures() {
      var minValues, i, min, bst, buffer,
        t1 = type$.JSArray_int,
        pq = new A.PriorityQueue(A._setArrayType([], t1), type$.PriorityQueue_int);
      B.JSArray_methods.forEach$1(A._setArrayType([5, 2, 8, 1, 9], t1), type$.void_Function_int._as(pq.get$add(pq)));
      minValues = A._setArrayType([], t1);
      for (i = 0; i < 3; ++i) {
        min = pq.removeMin$0();
        if (min != null)
          B.JSArray_methods.add$1(minValues, min);
      }
      A.print("  \u2705 PriorityQueue: first 3 mins are " + A.S(minValues));
      bst = new A.BinarySearchTree(type$.BinarySearchTree_String);
      B.JSArray_methods.forEach$1(A._setArrayType(["banana", "apple", "cherry", "date"], type$.JSArray_String), type$.void_Function_String._as(bst.get$insert(bst)));
      A.print("  \u2705 BST sorted: " + A.S(bst.toSortedList$0()));
      buffer = new A.CircularBuffer(type$.CircularBuffer_String);
      buffer.__CircularBuffer__capacity_A = 3;
      buffer.__CircularBuffer__buffer_A = type$.List_nullable_String._as(A.List_List$filled(3, null, false, type$.nullable_String));
      buffer.add$1(0, "a");
      buffer.add$1(0, "b");
      buffer.add$1(0, "c");
      buffer.add$1(0, "d");
      A.print("  \u2705 CircularBuffer: " + A.S(buffer.toList$0(0)));
    },
    generateRandomData(size) {
      var _list, _i,
        random = new A._Random();
      random._Random$1(42);
      _list = J.JSArray_JSArray$allocateGrowable(size, type$.int);
      for (_i = 0; _i < size; ++_i)
        _list[_i] = random.nextInt$1(10000);
      return _list;
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    toString$0(receiver) {
      return "null";
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JavaScriptObject.prototype = {};
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(new A.StateError("No element"));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    get$length(receiver) {
      return receiver.length;
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.__interceptors$_iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this.__interceptors$_index;
      if (t2 >= $length) {
        _this.__interceptors$_current = null;
        return false;
      }
      _this.__interceptors$_current = t1[t2];
      _this.__interceptors$_index = t2 + 1;
      return true;
    }
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<1>"));
    },
    join$0(_) {
      var i, t1, _this = this,
        $length = _this.get$length(_this);
      for (i = 0, t1 = ""; i < $length; ++i) {
        t1 += A.S(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = this._iterable.length,
        endOrLength = this._endOrLength;
      if (endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = this._iterable.length,
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = this._iterable.length,
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index,
        t1 = _this.get$_endIndex();
      if (realIndex >= t1)
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, "index"));
      t1 = _this._iterable;
      if (!(realIndex < t1.length))
        return A.ioore(t1, realIndex);
      return t1[realIndex];
    },
    toList$0(_) {
      var result, i, t2, _this = this,
        start = _this._start,
        t1 = _this._iterable,
        end = t1.length,
        endOrLength = _this._endOrLength,
        end0 = endOrLength < end ? endOrLength : end,
        $length = end0 - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      if (!(start < end))
        return A.ioore(t1, start);
      result = A.List_List$filled($length, t1[start], true, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        t2 = start + i;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        B.JSArray_methods.$indexSet(result, i, t1[t2]);
        if (t1.length < end0)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.get$length(t1);
      if (_this._length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1.elementAt$1(0, t2);
      ++_this._index;
      return true;
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return this._source.length;
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = t1.length,
        t3 = t2 - 1 - index;
      if (!(t3 >= 0))
        return A.ioore(t1, t3);
      return t1[t3];
    }
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {};
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {};
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.Iterable.prototype = {
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.Null.prototype = {
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Random.prototype = {
    _Random$1(seed) {
      var low, high, tmplow, low0, t1, t2, t3, _this = this, _4294967296 = 4294967296;
      do {
        low = seed >>> 0;
        seed = B.JSInt_methods._tdivFast$1(seed - low, _4294967296);
        high = seed >>> 0;
        seed = B.JSInt_methods._tdivFast$1(seed - high, _4294967296);
        tmplow = (~low >>> 0) + (low << 21 >>> 0);
        low0 = tmplow >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + B.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296) >>> 0;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = tmplow >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + B.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) >>> 0;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = tmplow >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + B.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) >>> 0;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = tmplow >>> 0;
        t1 = B.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296);
        tmplow = _this._lo * 1037;
        t2 = _this._lo = tmplow >>> 0;
        t3 = _this._hi * 1037 + B.JSInt_methods._tdivFast$1(tmplow - t2, _4294967296) >>> 0;
        _this._hi = t3;
        t2 = (t2 ^ low0) >>> 0;
        _this._lo = t2;
        t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 >>> 0) >>> 0;
        _this._hi = t1;
      } while (seed !== 0);
      if (t1 === 0 && t2 === 0)
        _this._lo = 23063;
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
    },
    _nextState$0() {
      var _this = this,
        t1 = _this._lo,
        tmpHi = 4294901760 * t1,
        tmpHiLo = tmpHi >>> 0,
        tmpLo = 55905 * t1,
        tmpLoLo = tmpLo >>> 0,
        newLo = tmpLoLo + tmpHiLo + _this._hi;
      t1 = newLo >>> 0;
      _this._lo = t1;
      _this._hi = B.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) >>> 0;
    },
    nextInt$1(max) {
      var t1, rnd32, result, _this = this;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      t1 = max - 1;
      if ((max & t1) === 0) {
        _this._nextState$0();
        return (_this._lo & t1) >>> 0;
      }
      do {
        _this._nextState$0();
        rnd32 = _this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    }
  };
  A.Strategy.prototype = {
    toString$0(_) {
      return "Strategy(" + this.get$meta().name + ")";
    }
  };
  A.AlgoMetadata.prototype = {
    toString$0(_) {
      var _this = this;
      return "AlgoMetadata(name: " + _this.name + ", time: " + _this.timeComplexity.notation + ", space: " + _this.spaceComplexity.notation + ", requiresSorted: " + _this.requiresSorted + ", memoryOverhead: " + _this.memoryOverheadBytes + "B)";
    }
  };
  A.TimeComplexity.prototype = {
    _enumToString$0() {
      return "TimeComplexity." + this._name;
    },
    toString$0(_) {
      return this.notation;
    }
  };
  A.PriorityQueue.prototype = {
    get$length(_) {
      return this._heap.length;
    },
    add$1(_, element) {
      var t1 = this._heap;
      B.JSArray_methods.add$1(t1, this.$ti._precomputed1._as(element));
      this._bubbleUp$1(t1.length - 1);
    },
    removeMin$0() {
      var min,
        t1 = this._heap,
        t2 = t1.length;
      if (t2 === 0)
        return null;
      if (t2 === 1) {
        if (0 >= t2)
          return A.ioore(t1, -1);
        return t1.pop();
      }
      min = B.JSArray_methods.get$first(t1);
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      B.JSArray_methods.$indexSet(t1, 0, t1.pop());
      this._bubbleDown$1(0);
      return min;
    },
    _bubbleUp$1(index) {
      var parentIndex, t1, t2, t3;
      if (index <= 0)
        return;
      parentIndex = B.JSInt_methods._tdivFast$1(index - 1, 2);
      t1 = this._heap;
      t2 = t1.length;
      if (!(index < t2))
        return A.ioore(t1, index);
      t3 = t1[index];
      if (!(parentIndex >= 0 && parentIndex < t2))
        return A.ioore(t1, parentIndex);
      if (J.compareTo$1$ns(t3, t1[parentIndex]) < 0) {
        this._swap$2(index, parentIndex);
        this._bubbleUp$1(parentIndex);
      }
    },
    _bubbleDown$1(index) {
      var t2, t3, smallest,
        t1 = 2 * index,
        leftChild = t1 + 1,
        rightChild = t1 + 2;
      t1 = this._heap;
      t2 = t1.length;
      if (leftChild < t2) {
        t3 = t1[leftChild];
        if (!(index < t2))
          return A.ioore(t1, index);
        t3 = J.compareTo$1$ns(t3, t1[index]) < 0;
        t2 = t3;
      } else
        t2 = false;
      smallest = t2 ? leftChild : index;
      t2 = t1.length;
      if (rightChild < t2) {
        t3 = t1[rightChild];
        if (!(smallest < t2))
          return A.ioore(t1, smallest);
        t1 = J.compareTo$1$ns(t3, t1[smallest]) < 0;
      } else
        t1 = false;
      if (t1)
        smallest = rightChild;
      if (smallest !== index) {
        this._swap$2(index, smallest);
        this._bubbleDown$1(smallest);
      }
    },
    _swap$2(i, j) {
      var temp,
        t1 = this._heap,
        t2 = t1.length;
      if (!(i >= 0 && i < t2))
        return A.ioore(t1, i);
      temp = t1[i];
      if (!(j >= 0 && j < t2))
        return A.ioore(t1, j);
      t2 = t1[j];
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      t1[i] = t2;
      if (!(j >= 0 && j < t1.length))
        return A.ioore(t1, j);
      t1[j] = temp;
    },
    toString$0(_) {
      return "PriorityQueue(" + A.S(this._heap) + ")";
    }
  };
  A.BinarySearchTree.prototype = {
    insert$1(_, value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._root = _this._insertRecursive$2(_this._root, value);
    },
    toSortedList$0() {
      var result = A._setArrayType([], this.$ti._eval$1("JSArray<1>"));
      this._inOrderTraversal$2(this._root, result);
      return result;
    },
    _insertRecursive$2(node, value) {
      var t1 = this.$ti;
      t1._eval$1("BSTNode<1>?")._as(node);
      t1._precomputed1._as(value);
      if (node == null)
        return new A.BSTNode(value, t1._eval$1("BSTNode<1>"));
      if (J.compareTo$1$ns(value, node.value) <= 0)
        node.set$left(this._insertRecursive$2(node.left, value));
      else
        node.set$right(this._insertRecursive$2(node.right, value));
      return node;
    },
    _inOrderTraversal$2(node, result) {
      var t1 = this.$ti;
      t1._eval$1("BSTNode<1>?")._as(node);
      t1._eval$1("List<1>")._as(result);
      if (node == null)
        return;
      this._inOrderTraversal$2(node.left, result);
      B.JSArray_methods.add$1(result, node.value);
      this._inOrderTraversal$2(node.right, result);
    },
    toString$0(_) {
      if (this._root == null)
        return "BST()";
      return "BST(" + A.S(this.toSortedList$0()) + ")";
    }
  };
  A.BSTNode.prototype = {
    toString$0(_) {
      return "BSTNode(" + A.S(this.value) + ")";
    },
    set$left(left) {
      this.left = this.$ti._eval$1("BSTNode<1>?")._as(left);
    },
    set$right(right) {
      this.right = this.$ti._eval$1("BSTNode<1>?")._as(right);
    }
  };
  A.CircularBuffer.prototype = {
    get$length(_) {
      return this._size;
    },
    add$1(_, element) {
      var t1, t2, _this = this;
      _this.$ti._precomputed1._as(element);
      t1 = _this.__CircularBuffer__buffer_A;
      t1 === $ && A.throwLateFieldNI("_buffer");
      B.JSArray_methods.$indexSet(t1, _this._tail, element);
      t1 = _this._tail;
      t2 = _this.__CircularBuffer__capacity_A;
      t2 === $ && A.throwLateFieldNI("_capacity");
      _this._tail = (t1 + 1) % t2;
      t1 = _this._size;
      if (t1 < t2)
        _this._size = t1 + 1;
      else
        _this._head = (_this._head + 1) % t2;
    },
    toList$0(_) {
      var i, t1, t2, index, element, _this = this,
        result = A._setArrayType([], _this.$ti._eval$1("JSArray<1>"));
      for (i = 0; i < _this._size; ++i) {
        t1 = _this._head;
        t2 = _this.__CircularBuffer__capacity_A;
        t2 === $ && A.throwLateFieldNI("_capacity");
        index = B.JSInt_methods.$mod(t1 + i, t2);
        t2 = _this.__CircularBuffer__buffer_A;
        t2 === $ && A.throwLateFieldNI("_buffer");
        if (!(index < t2.length))
          return A.ioore(t2, index);
        element = t2[index];
        if (element != null)
          B.JSArray_methods.add$1(result, element);
      }
      return result;
    },
    toString$0(_) {
      return "CircularBuffer(" + A.S(this.toList$0(0)) + ")";
    }
  };
  A.KnapsackInput.prototype = {
    toString$0(_) {
      return "KnapsackInput(items: 3, capacity: " + this.capacity + ")";
    }
  };
  A.KnapsackResult.prototype = {
    toString$0(_) {
      return "KnapsackOutput(maxValue: " + this.maxValue + ", selectedItems: " + A.S(this.selectedItems) + ")";
    }
  };
  A.KnapsackDP.prototype = {
    get$meta() {
      return B.AlgoMetadata_064;
    },
    execute$1(input) {
      var t1, t2, _i, i, t3, w, t4, t5, t6, t7, t8, selectedItems,
        $W = input.capacity,
        dp = J.JSArray_JSArray$allocateGrowable(4, type$.List_int);
      for (t1 = $W + 1, t2 = type$.int, _i = 0; _i < 4; ++_i)
        dp[_i] = A.List_List$filled(t1, 0, false, t2);
      for (t1 = input.weights, t2 = input.values, i = 1; i <= 3; ++i)
        for (t3 = i - 1, w = 1; w <= $W; ++w) {
          t4 = t1[t3];
          t5 = dp.length;
          if (t4 <= w) {
            if (!(i < t5))
              return A.ioore(dp, i);
            t6 = dp[i];
            if (!(t3 < t5))
              return A.ioore(dp, t3);
            t5 = dp[t3];
            t7 = t5.length;
            if (!(w < t7))
              return A.ioore(t5, w);
            t8 = t5[w];
            t4 = w - t4;
            if (!(t4 >= 0 && t4 < t7))
              return A.ioore(t5, t4);
            B.JSArray_methods.$indexSet(t6, w, Math.max(t8, t5[t4] + t2[t3]));
          } else {
            if (!(i < t5))
              return A.ioore(dp, i);
            t4 = dp[i];
            if (!(t3 < t5))
              return A.ioore(dp, t3);
            t5 = dp[t3];
            if (!(w < t5.length))
              return A.ioore(t5, w);
            B.JSArray_methods.$indexSet(t4, w, t5[w]);
          }
        }
      selectedItems = A._setArrayType([], type$.JSArray_int);
      w = $W;
      i = 3;
      while (true) {
        if (!(i > 0 && w > 0))
          break;
        t2 = dp.length;
        if (!(i >= 0 && i < t2))
          return A.ioore(dp, i);
        t3 = dp[i];
        if (!(w >= 0 && w < t3.length))
          return A.ioore(t3, w);
        t3 = t3[w];
        --i;
        if (!(i >= 0 && i < t2))
          return A.ioore(dp, i);
        t2 = dp[i];
        if (!(w < t2.length))
          return A.ioore(t2, w);
        if (t3 !== t2[w]) {
          B.JSArray_methods.add$1(selectedItems, i);
          w -= t1[i];
        }
      }
      if (3 >= dp.length)
        return A.ioore(dp, 3);
      t1 = dp[3];
      if (!($W < t1.length))
        return A.ioore(t1, $W);
      t1 = t1[$W];
      t2 = type$.ReversedListIterable_int;
      t2 = A.List_List$_of(new A.ReversedListIterable(selectedItems, t2), t2._precomputed1);
      return new A.KnapsackResult(t1, t2);
    }
  };
  A.LCSInput.prototype = {
    toString$0(_) {
      return 'LCSInput(text1: "' + this.text1 + '", text2: "' + this.text2 + '")';
    }
  };
  A.LCSResult.prototype = {
    toString$0(_) {
      return "LCSResult(length: " + this.length + ', lcs: "' + this.subsequence + '")';
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.LongestCommonSubsequenceDP.prototype = {
    get$meta() {
      return B.AlgoMetadata_VZC;
    },
    execute$1(input) {
      var t3, t4, _i, i, j, t5, t6, t7, lcs, result,
        t1 = input.text1,
        m = t1.length,
        t2 = input.text2,
        n = t2.length,
        _length = m + 1,
        dp = J.JSArray_JSArray$allocateGrowable(_length, type$.List_int);
      for (t3 = n + 1, t4 = type$.int, _i = 0; _i < _length; ++_i)
        dp[_i] = A.List_List$filled(t3, 0, false, t4);
      for (i = 1; i <= m; ++i)
        for (t3 = i - 1, j = 1; j <= n; ++j) {
          t4 = t1[t3];
          t5 = j - 1;
          t6 = t2[t5];
          t7 = dp.length;
          if (t4 === t6) {
            if (!(i < t7))
              return A.ioore(dp, i);
            t4 = dp[i];
            if (!(t3 < t7))
              return A.ioore(dp, t3);
            t7 = dp[t3];
            if (!(t5 < t7.length))
              return A.ioore(t7, t5);
            B.JSArray_methods.$indexSet(t4, j, t7[t5] + 1);
          } else {
            if (!(i < t7))
              return A.ioore(dp, i);
            t4 = dp[i];
            if (!(t3 < t7))
              return A.ioore(dp, t3);
            t7 = dp[t3];
            if (!(j < t7.length))
              return A.ioore(t7, j);
            t7 = t7[j];
            if (!(t5 < t4.length))
              return A.ioore(t4, t5);
            B.JSArray_methods.$indexSet(t4, j, Math.max(t7, t4[t5]));
          }
        }
      lcs = new A.StringBuffer("");
      j = n;
      i = m;
      while (true) {
        if (!(i > 0 && j > 0))
          break;
        t3 = i - 1;
        if (!(t3 >= 0))
          return A.ioore(t1, t3);
        t4 = t1[t3];
        t5 = j - 1;
        if (!(t5 >= 0))
          return A.ioore(t2, t5);
        if (t4 === t2[t5]) {
          lcs._contents += t4;
          j = t5;
          i = t3;
        } else {
          t4 = dp.length;
          if (!(t3 < t4))
            return A.ioore(dp, t3);
          t6 = dp[t3];
          if (!(j >= 0 && j < t6.length))
            return A.ioore(t6, j);
          t6 = t6[j];
          if (!(i >= 0 && i < t4))
            return A.ioore(dp, i);
          t4 = dp[i];
          if (!(t5 < t4.length))
            return A.ioore(t4, t5);
          if (t6 > t4[t5])
            i = t3;
          else
            j = t5;
        }
      }
      t1 = lcs._contents;
      result = new A.ReversedListIterable(A._setArrayType((t1.charCodeAt(0) == 0 ? t1 : t1).split(""), type$.JSArray_String), type$.ReversedListIterable_String).join$0(0);
      if (!(m < dp.length))
        return A.ioore(dp, m);
      t1 = dp[m];
      if (!(n < t1.length))
        return A.ioore(t1, n);
      return new A.LCSResult(t1[n], result);
    }
  };
  A.CoinChangeInput.prototype = {
    toString$0(_) {
      return "CoinChangeInput(coins: " + A.S(this.coins) + ", amount: " + this.amount + ")";
    }
  };
  A.CoinChangeResult.prototype = {
    toString$0(_) {
      return "CoinChangeResult(minCoins: " + this.minCoins + ", combination: " + A.S(this.coinCombination) + ")";
    }
  };
  A.CoinChangeDP.prototype = {
    get$meta() {
      return B.AlgoMetadata_OWQ;
    },
    execute$1(input) {
      var t1, t2, dp, $parent, i, _i, coin, combination, curr,
        amount = input.amount,
        coins = input.coins;
      if (amount === 0)
        return B.CoinChangeResult_0_List_empty;
      t1 = amount + 1;
      t2 = type$.int;
      dp = A.List_List$filled(t1, t1, false, t2);
      $parent = A.List_List$filled(t1, -1, false, t2);
      B.JSArray_methods.$indexSet(dp, 0, 0);
      for (i = 1; i <= amount; ++i)
        for (_i = 0; _i < 3; ++_i) {
          coin = coins[_i];
          if (coin <= i) {
            t2 = i - coin;
            if (!(t2 >= 0))
              return A.ioore(dp, t2);
            t2 = dp[t2] + 1 < dp[i];
          } else
            t2 = false;
          if (t2) {
            t2 = i - coin;
            if (!(t2 >= 0))
              return A.ioore(dp, t2);
            B.JSArray_methods.$indexSet(dp, i, dp[t2] + 1);
            B.JSArray_methods.$indexSet($parent, i, coin);
          }
        }
      if (dp[amount] > amount)
        return B.CoinChangeResult_m1_List_empty;
      combination = A._setArrayType([], type$.JSArray_int);
      for (curr = amount; curr > 0;) {
        if (!(curr < t1))
          return A.ioore($parent, curr);
        coin = $parent[curr];
        B.JSArray_methods.add$1(combination, coin);
        curr -= coin;
      }
      return new A.CoinChangeResult(dp[amount], combination);
    }
  };
  A.BinarySearchStrategy.prototype = {
    get$meta() {
      return B.AlgoMetadata_HBz;
    },
    execute$1(input) {
      var t1, left, right, mid, midValue;
      type$.List_int._as(input);
      for (t1 = this.target, left = 0, right = 999; left <= right;) {
        mid = left + B.JSInt_methods._shrOtherPositive$1(right - left, 1);
        if (!(mid >= 0 && mid < 1000))
          return A.ioore(input, mid);
        midValue = input[mid];
        if (midValue === t1)
          return mid;
        else if (midValue < t1)
          left = mid + 1;
        else
          right = mid - 1;
      }
      return null;
    },
    toString$0(_) {
      return "BinarySearchStrategy(target: " + this.target + ")";
    }
  };
  A.LinearSearchStrategy.prototype = {
    get$meta() {
      return B.AlgoMetadata_yRm;
    },
    execute$1(input) {
      var t1, i;
      type$.List_int._as(input);
      for (t1 = this.target, i = 0; i < 1000; ++i)
        if (input[i] === t1)
          return i;
      return null;
    },
    toString$0(_) {
      return "LinearSearchStrategy(target: " + this.target + ")";
    }
  };
  A.InsertionSortStrategy.prototype = {
    get$meta() {
      return B.AlgoMetadata_mqf;
    },
    execute$1(input) {
      var t1, i, key, j, t2, t3,
        result = A.List_List$from(type$.List_int._as(input), type$.int);
      for (t1 = result.length, i = 1; i < t1; ++i) {
        key = result[i];
        j = i - 1;
        while (true) {
          if (!(j >= 0 && result[j] > key))
            break;
          t2 = j + 1;
          if (!(j >= 0))
            return A.ioore(result, j);
          t3 = result[j];
          if (!(t2 >= 0))
            return A.ioore(result, t2);
          result[t2] = t3;
          --j;
        }
        t2 = j + 1;
        if (!(t2 >= 0))
          return A.ioore(result, t2);
        result[t2] = key;
      }
      return result;
    },
    toString$0(_) {
      return "InsertionSortStrategy()";
    }
  };
  A.MergeSortStrategy.prototype = {
    get$meta() {
      return B.AlgoMetadata_v3K;
    },
    execute$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = input.length;
      if (t1 <= 1)
        return A.List_List$from(input, type$.int);
      return this._mergeSort$3(input, 0, t1 - 1);
    },
    _mergeSort$3(arr, left, right) {
      var mid;
      type$.List_int._as(arr);
      if (left >= right) {
        if (!(left < arr.length))
          return A.ioore(arr, left);
        return A._setArrayType([arr[left]], type$.JSArray_int);
      }
      mid = left + B.JSInt_methods._shrOtherPositive$1(right - left, 1);
      return this._merge$2(this._mergeSort$3(arr, left, mid), this._mergeSort$3(arr, mid + 1, right));
    },
    _merge$2(left, right) {
      var result, leftIndex, rightIndex, t2, leftIndex0, rightIndex0,
        t1 = type$.List_int;
      t1._as(left);
      t1._as(right);
      result = A._setArrayType([], type$.JSArray_int);
      leftIndex = 0;
      rightIndex = 0;
      while (true) {
        t1 = left.length;
        if (!(leftIndex < t1 && rightIndex < right.length))
          break;
        if (!(leftIndex < t1))
          return A.ioore(left, leftIndex);
        t1 = left[leftIndex];
        if (!(rightIndex < right.length))
          return A.ioore(right, rightIndex);
        t2 = right[rightIndex];
        if (t1 <= t2) {
          ++leftIndex;
          B.JSArray_methods.add$1(result, t1);
        } else {
          ++rightIndex;
          B.JSArray_methods.add$1(result, t2);
        }
      }
      for (; leftIndex < left.length; leftIndex = leftIndex0) {
        leftIndex0 = leftIndex + 1;
        B.JSArray_methods.add$1(result, left[leftIndex]);
      }
      for (; rightIndex < right.length; rightIndex = rightIndex0) {
        rightIndex0 = rightIndex + 1;
        B.JSArray_methods.add$1(result, right[rightIndex]);
      }
      return result;
    }
  };
  A.QuickSort.prototype = {
    get$meta() {
      return B.AlgoMetadata_gpB;
    },
    execute$1(input) {
      var t1, result;
      type$.List_int._as(input);
      t1 = input.length;
      if (t1 === 0 || t1 === 1)
        return A.List_List$from(input, type$.int);
      result = A.List_List$from(input, type$.int);
      this._quickSort$3(result, 0, result.length - 1);
      return result;
    },
    _quickSort$3(arr, low, high) {
      var pivotIndex;
      type$.List_int._as(arr);
      if (low < high) {
        pivotIndex = this._partition$3(arr, low, high);
        this._quickSort$3(arr, low, pivotIndex - 1);
        this._quickSort$3(arr, pivotIndex + 1, high);
      }
    },
    _partition$3(arr, low, high) {
      var t1, pivot, i, j, t2, temp;
      type$.List_int._as(arr);
      t1 = arr.length;
      if (!(high >= 0 && high < t1))
        return A.ioore(arr, high);
      pivot = arr[high];
      i = low - 1;
      for (j = low; j < high; ++j) {
        if (!(j >= 0 && j < t1))
          return A.ioore(arr, j);
        t2 = arr[j];
        if (t2 <= pivot) {
          ++i;
          if (!(i >= 0 && i < t1))
            return A.ioore(arr, i);
          temp = arr[i];
          arr.$flags & 2 && A.throwUnsupportedOperation(arr);
          arr[i] = t2;
          arr[j] = temp;
        }
      }
      t1 = i + 1;
      this._quick_sort$_swap$3(arr, t1, high);
      return t1;
    },
    _quick_sort$_swap$3(arr, i, j) {
      var t1, temp;
      type$.List_int._as(arr);
      t1 = arr.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(arr, i);
      temp = arr[i];
      if (!(j >= 0 && j < t1))
        return A.ioore(arr, j);
      arr[i] = arr[j];
      arr[j] = temp;
    }
  };
  A.KMPInput.prototype = {
    toString$0(_) {
      return 'KMPInput(text: "' + this.text + '", pattern: "' + this.pattern + '")';
    }
  };
  A.KMPResult.prototype = {
    toString$0(_) {
      var t1 = this.occurrences;
      return "KMPResult(found: " + (t1.length !== 0) + ", occurrences: " + A.S(t1) + ", count: " + t1.length + ")";
    }
  };
  A.RabinKarpInput.prototype = {
    toString$0(_) {
      return 'RabinKarpInput(text: "' + this.text + '", pattern: "' + this.pattern + '", base: 256, prime: 101)';
    }
  };
  A.RabinKarpResult.prototype = {
    toString$0(_) {
      var t1 = this.occurrences;
      return "RabinKarpResult(found: " + (t1.length !== 0) + ", occurrences: " + A.S(t1) + ", collisions: " + this.hashCollisions + ")";
    }
  };
  A.ManacherInput.prototype = {
    toString$0(_) {
      return 'ManacherInput(text: "' + this.text + '")';
    }
  };
  A.ManacherResult.prototype = {
    toString$0(_) {
      return 'ManacherResult(palindrome: "' + this.longestPalindrome + '", start: ' + this.startIndex + ", length: " + this.length + ")";
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.KnuthMorrisPrattAlgorithm.prototype = {
    get$meta() {
      return B.AlgoMetadata_vvT;
    },
    execute$1(input) {
      var failure, occurrences, t2, t3, i, j, t4,
        text = input.text,
        pattern = input.pattern,
        t1 = pattern.length;
      if (t1 === 0)
        return new A.KMPResult(A._setArrayType([], type$.JSArray_int));
      failure = this._buildFailureFunction$1(pattern);
      occurrences = A._setArrayType([], type$.JSArray_int);
      for (t2 = text.length, t3 = failure.length, i = 0, j = 0; i < t2;) {
        t4 = text[i];
        if (!(j >= 0 && j < t1))
          return A.ioore(pattern, j);
        if (t4 === pattern[j]) {
          ++i;
          ++j;
          if (j === t1) {
            B.JSArray_methods.add$1(occurrences, i - j);
            t4 = j - 1;
            if (!(t4 < t3))
              return A.ioore(failure, t4);
            j = failure[t4];
          }
        } else if (j > 0) {
          t4 = j - 1;
          if (!(t4 < t3))
            return A.ioore(failure, t4);
          j = failure[t4];
        } else
          ++i;
      }
      return new A.KMPResult(occurrences);
    },
    _buildFailureFunction$1(pattern) {
      var i, j, t2,
        t1 = pattern.length,
        failure = A.List_List$filled(t1, 0, false, type$.int);
      for (i = 1, j = 0; i < t1;) {
        t2 = pattern[i];
        if (!(j >= 0 && j < t1))
          return A.ioore(pattern, j);
        if (t2 === pattern[j]) {
          ++j;
          B.JSArray_methods.$indexSet(failure, i, j);
          ++i;
        } else if (j > 0)
          j = failure[j - 1];
        else {
          B.JSArray_methods.$indexSet(failure, i, 0);
          ++i;
        }
      }
      return failure;
    }
  };
  A.RabinKarpAlgorithm.prototype = {
    get$meta() {
      return B.AlgoMetadata_AG0;
    },
    execute$1(input) {
      var n, t2, h, i, patternHash, windowHash, occurrences, collisions, t3,
        text = input.text,
        pattern = input.pattern,
        t1 = pattern.length;
      if (t1 === 0 || t1 > text.length)
        return new A.RabinKarpResult(A._setArrayType([], type$.JSArray_int), 0);
      n = text.length;
      for (t2 = t1 - 1, h = 1, i = 0; i < t2; ++i)
        h = B.JSInt_methods.$mod(h * 256, 101);
      for (patternHash = 0, windowHash = 0, i = 0; i < t1; ++i) {
        patternHash = B.JSInt_methods.$mod(256 * patternHash + pattern.charCodeAt(i), 101);
        if (!(i < n))
          return A.ioore(text, i);
        windowHash = B.JSInt_methods.$mod(256 * windowHash + text.charCodeAt(i), 101);
      }
      occurrences = A._setArrayType([], type$.JSArray_int);
      for (t2 = n - t1, collisions = 0, i = 0; i <= t2; ++i) {
        if (patternHash === windowHash)
          if (this._checkMatch$3(text, pattern, i))
            B.JSArray_methods.add$1(occurrences, i);
          else
            ++collisions;
        if (i < t2) {
          t3 = i + t1;
          if (!(t3 < n))
            return A.ioore(text, t3);
          windowHash = B.JSInt_methods.$mod(256 * (windowHash - text.charCodeAt(i) * h) + text.charCodeAt(t3), 101);
        }
      }
      return new A.RabinKarpResult(occurrences, collisions);
    },
    _checkMatch$3(text, pattern, start) {
      var t1, t2, i, t3;
      for (t1 = pattern.length, t2 = text.length, i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 < t2))
          return A.ioore(text, t3);
        if (text[t3] !== pattern[i])
          return false;
      }
      return true;
    }
  };
  A.ManacherAlgorithm.prototype = {
    get$meta() {
      return B.AlgoMetadata_S4u;
    },
    execute$1(input) {
      var text, n, palindromeLengths, t1, center, rightBoundary, maxLen, centerIndex, i, mirror, maxLen0, rightBoundary0, t2, t3, start,
        originalText = input.text;
      if (originalText.length === 0)
        return B.ManacherResult_jCv;
      text = "^#" + B.JSArray_methods.join$1(A._setArrayType(originalText.split(""), type$.JSArray_String), "#") + "#$";
      n = text.length;
      palindromeLengths = A.List_List$filled(n, 0, false, type$.int);
      for (t1 = n - 1, center = 0, rightBoundary = 0, maxLen = 0, centerIndex = 0, i = 1; i < t1; ++i) {
        mirror = 2 * center - i;
        if (i < rightBoundary) {
          if (!(mirror >= 0 && mirror < n))
            return A.ioore(palindromeLengths, mirror);
          B.JSArray_methods.$indexSet(palindromeLengths, i, Math.min(rightBoundary - i, palindromeLengths[mirror]));
        }
        while (true) {
          maxLen0 = palindromeLengths[i];
          rightBoundary0 = i + maxLen0;
          t2 = rightBoundary0 + 1;
          if (!(t2 >= 0 && t2 < n))
            return A.ioore(text, t2);
          t2 = text[t2];
          t3 = i - maxLen0 - 1;
          if (!(t3 >= 0 && t3 < n))
            return A.ioore(text, t3);
          if (!(t2 === text[t3]))
            break;
          B.JSArray_methods.$indexSet(palindromeLengths, i, maxLen0 + 1);
        }
        if (rightBoundary0 > rightBoundary) {
          rightBoundary = rightBoundary0;
          center = i;
        }
        if (maxLen0 > maxLen) {
          centerIndex = i;
          maxLen = maxLen0;
        }
      }
      start = B.JSInt_methods._tdivFast$1(centerIndex - maxLen, 2);
      return new A.ManacherResult(B.JSString_methods.substring$2(originalText, start, start + maxLen), start, maxLen);
    }
  };
  (function installTearOffs() {
    var _instance_1_i = hunkHelpers._instance_1i;
    _instance_1_i(A.PriorityQueue.prototype, "get$add", "add$1", 0);
    _instance_1_i(A.BinarySearchTree.prototype, "get$insert", "insert$1", 0);
  })();
  (function inheritance() {
    var _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.Iterable, A.ListIterator, A.Closure, A.Rti, A._FunctionParameters, A._Type, A._Enum, A.Null, A.StringBuffer, A._Random, A.Strategy, A.AlgoMetadata, A.PriorityQueue, A.BinarySearchTree, A.BSTNode, A.CircularBuffer, A.KnapsackInput, A.KnapsackResult, A.LCSInput, A.LCSResult, A.CoinChangeInput, A.CoinChangeResult, A.KMPInput, A.KMPResult, A.RabinKarpInput, A.RabinKarpResult, A.ManacherInput, A.ManacherResult]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSNumber, J.JSString]);
    _inherit(J.JSArray, J.JavaScriptObject);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.RuntimeError, A._Error, A.AssertionError, A.TypeError, A.ArgumentError, A.UnsupportedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.EfficientLengthIterable, A.Iterable);
    _inherit(A.ListIterable, A.EfficientLengthIterable);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.ReversedListIterable]);
    _inherit(A.TearOffClosure, A.Closure);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A.TimeComplexity, A._Enum);
    _inheritMany(A.Strategy, [A.KnapsackDP, A.LongestCommonSubsequenceDP, A.CoinChangeDP, A.BinarySearchStrategy, A.LinearSearchStrategy, A.InsertionSortStrategy, A.MergeSortStrategy, A.QuickSort, A.KnuthMorrisPrattAlgorithm, A.RabinKarpAlgorithm, A.ManacherAlgorithm]);
  })();
  var init = {
    G: typeof self != "undefined" ? self : globalThis,
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["~(Object?)"],
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"TrustedGetRuntimeType":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"JSNumber":{"num":[]},"JSInt":{"int":[],"num":[],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"num":[],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"TrustedGetRuntimeType":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"Iterable":["1"]},"int":{"num":[]},"List":{"Iterable":["1"]},"KnapsackDP":{"Strategy":["KnapsackInput","KnapsackResult"]},"LongestCommonSubsequenceDP":{"Strategy":["LCSInput","LCSResult"]},"CoinChangeDP":{"Strategy":["CoinChangeInput","CoinChangeResult"]},"BinarySearchStrategy":{"Strategy":["List<int>","int?"]},"LinearSearchStrategy":{"Strategy":["List<int>","int?"]},"InsertionSortStrategy":{"Strategy":["List<int>","List<int>"]},"MergeSortStrategy":{"Strategy":["List<int>","List<int>"]},"QuickSort":{"Strategy":["List<int>","List<int>"]},"KnuthMorrisPrattAlgorithm":{"Strategy":["KMPInput","KMPResult"]},"RabinKarpAlgorithm":{"Strategy":["RabinKarpInput","RabinKarpResult"]},"ManacherAlgorithm":{"Strategy":["ManacherInput","ManacherResult"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      BinarySearchTree_String: findType("BinarySearchTree<String>"),
      CircularBuffer_String: findType("CircularBuffer<String>"),
      Function: findType("Function"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_String: findType("List<String?>"),
      Null: findType("Null"),
      Object: findType("Object"),
      PriorityQueue_int: findType("PriorityQueue<int>"),
      Record: findType("Record"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ReversedListIterable_int: findType("ReversedListIterable<int>"),
      String: findType("String"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      bool: findType("bool"),
      double: findType("double"),
      int: findType("int"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Object: findType("Object?"),
      nullable_String: findType("String?"),
      nullable_bool: findType("bool?"),
      nullable_double: findType("double?"),
      nullable_int: findType("int?"),
      nullable_num: findType("num?"),
      num: findType("num"),
      void_Function_String: findType("~(String)"),
      void_Function_int: findType("~(int)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.TimeComplexity_fJa = new A.TimeComplexity("O(n\xb2)", 4, "oN2");
    B.AlgoMetadata_064 = new A.AlgoMetadata("knapsack_dp", B.TimeComplexity_fJa, B.TimeComplexity_fJa, false, 4096, "0/1 Knapsack using Dynamic Programming");
    B.TimeComplexity_tFJ = new A.TimeComplexity("O(n)", 2, "oN");
    B.TimeComplexity_qeE = new A.TimeComplexity("O(1)", 0, "o1");
    B.AlgoMetadata_AG0 = new A.AlgoMetadata("rabin_karp", B.TimeComplexity_tFJ, B.TimeComplexity_qeE, false, 0, "Rabin-Karp rolling hash pattern matching algorithm");
    B.TimeComplexity_RLs = new A.TimeComplexity("O(log n)", 1, "oLogN");
    B.AlgoMetadata_HBz = new A.AlgoMetadata("binary_search", B.TimeComplexity_RLs, B.TimeComplexity_qeE, true, 0, "Binary search through sorted list");
    B.AlgoMetadata_OWQ = new A.AlgoMetadata("coin_change_dp", B.TimeComplexity_tFJ, B.TimeComplexity_tFJ, false, 512, "Coin Change using Dynamic Programming");
    B.AlgoMetadata_S4u = new A.AlgoMetadata("manacher_algorithm", B.TimeComplexity_tFJ, B.TimeComplexity_tFJ, false, 0, "Manacher's algorithm for finding all palindromic substrings");
    B.AlgoMetadata_VZC = new A.AlgoMetadata("lcs_dp", B.TimeComplexity_fJa, B.TimeComplexity_fJa, false, 2048, "Longest Common Subsequence using Dynamic Programming");
    B.TimeComplexity_9c4 = new A.TimeComplexity("O(n log n)", 3, "oNLogN");
    B.AlgoMetadata_gpB = new A.AlgoMetadata("quick_sort", B.TimeComplexity_9c4, B.TimeComplexity_RLs, false, 0, null);
    B.AlgoMetadata_mqf = new A.AlgoMetadata("insertion_sort", B.TimeComplexity_fJa, B.TimeComplexity_qeE, false, 0, "Stable insertion sort, efficient for small lists");
    B.AlgoMetadata_v3K = new A.AlgoMetadata("merge_sort", B.TimeComplexity_9c4, B.TimeComplexity_tFJ, false, 4096, "Stable merge sort with guaranteed O(n log n) performance");
    B.AlgoMetadata_vvT = new A.AlgoMetadata("knuth_morris_pratt", B.TimeComplexity_tFJ, B.TimeComplexity_tFJ, false, 0, "Knuth-Morris-Pratt pattern matching algorithm");
    B.AlgoMetadata_yRm = new A.AlgoMetadata("linear_search", B.TimeComplexity_tFJ, B.TimeComplexity_qeE, false, 0, "Linear search through unsorted list");
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.CoinChangeResult_0_List_empty = new A.CoinChangeResult(0, B.List_empty);
    B.CoinChangeResult_m1_List_empty = new A.CoinChangeResult(-1, B.List_empty);
    B.ManacherResult_jCv = new A.ManacherResult("", 0, 0);
  })();
  (function staticFields() {
    $.toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
  })();
  (function nativeSupport() {
    hunkHelpers.setOrUpdateInterceptorsByTag({});
    hunkHelpers.setOrUpdateLeafTags({});
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=web_demo.js.map
